server.port = 8951
# pod ovim se zavede aplikacija
spring.application.name=pccService

# samostalno app [ako je na true trazi server da se vrti...]
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

# isti ishod..
#eureka.client.registerWithEureka=false
#eureka.client.fetchRegistry=false

#ako ima neku min autent. ovaj url dodace ga i na klijenta
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
#eureka.instance.hostname=localhost
#eureka.instance.leaseRenewalIntervalInSeconds=15
#eureka.instance.leaseExpirationDurationInSeconds=2

#You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
spring.cloud.loadbalancer.ribbon.enabled=false

# Spring Cloud LoadBalancer is currently working with default default cache. You can switch to using Caffeine cache, by adding it to the classpath.
# https://cloud.spring.io/spring-cloud-commons/reference/html/ 3.2 caching

#security [https] config
server.ssl.enabled=true
server.ssl.protocol=TLS
server.ssl.key-alias=pcc
server.ssl.key-store=classpath:kps_pcc_service_keystore.jks
server.ssl.key-store-password=sepstore
server.ssl.key-store-type=JKS
server.ssl.trust-store=classpath:kps_pcc_service_truststore.jks
server.ssl.trust-store-password=sepstore
server.ssl.trust-store-type=JKS
server.ssl.client-auth=want

security.require-ssl=true

server.address=127.0.0.1


eureka.instance.securePort=${server.port}
eureka.instance.securePortEnabled=true
eureka.instance.prefer-ip-address=true
eureka.instance.nonSecurePortEnabled=false
eureka.instance.ip-address=${server.address}
eureka.instance.instance-id=${server.address}:${server.port}

# db config
spring.datasource.url=jdbc:postgresql://localhost:5432/pccService?useSSL=false
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=create-drop

spring.datasource.dbcp.test-while-idle =true
spring.jpa.show-sql =true
spring.jpa.hibernate.ddl-auto =create-drop
spring.datasource.initialization-mode=always

spring.jpa.properties.hibernate.dialect =org.hibernate.dialect.PostgreSQL95Dialect

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults =false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

# kraira fajl u njega ide sve zivo
# logging.file = logs/mylog.log



